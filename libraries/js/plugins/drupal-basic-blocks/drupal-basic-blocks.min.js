(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["drupal-basic-blocks"] = factory();
	else
		root["drupal-basic-blocks"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./plugins/drupal-basic-blocks/blocks.js":
/*!***********************************************!*\
  !*** ./plugins/drupal-basic-blocks/blocks.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @file
 * Contains blocks.js
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var blockManager = editor.BlockManager;
  /* Block : Heading */

  if (opts.blocks.indexOf('heading') >= 0) {
    blockManager.add('heading', {
      label: opts.headingLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-header'
      },
      content: {
        type: 'heading',
        content: opts.headingDefaultContent
      }
    });
  }
  /* Block : Paragraph */


  if (opts.blocks.indexOf('paragraph') >= 0) {
    blockManager.add('paragraph', {
      label: opts.paragraphLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-paragraph'
      },
      content: {
        type: 'paragraph',
        content: opts.paragraphDefaultContent
      }
    });
  }
  /* Block : Link */


  if (opts.blocks.indexOf('link') >= 0) {
    blockManager.add('link', {
      label: opts.linkLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-link'
      },
      content: {
        type: 'link',
        content: opts.linkDefaultContent
      }
    });
  }
  /* Block : Image */


  if (opts.blocks.indexOf('image') >= 0) {
    blockManager.add('image', {
      label: opts.imageLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-picture-o'
      },
      select: true,
      activate: true,
      content: {
        type: 'image'
      }
    });
  }
  /* Block : Video */


  if (opts.blocks.indexOf('video') >= 0) {
    blockManager.add('video', {
      label: opts.videoLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-youtube-play'
      },
      content: {
        type: 'video',
        style: {
          height: '350px',
          width: '615px'
        }
      }
    });
  }
  /* Block : List */


  if (opts.blocks.indexOf('list') >= 0) {
    blockManager.add('list', {
      label: opts.listLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-list'
      },
      content: {
        type: 'list',
        components: opts.listDefaultComponents
      }
    });
  }
  /* Block : Map */


  if (opts.blocks.indexOf('map') >= 0) {
    blockManager.add('map', {
      label: opts.mapLabel,
      category: opts.basicCategory,
      attributes: {
        "class": 'fa fa-map-o'
      },
      content: {
        type: 'map',
        style: {
          height: '350px'
        }
      }
    });
  }
  /* Block : Section */


  if (opts.blocks.indexOf('section') >= 0) {
    blockManager.add('section', {
      label: opts.sectionLabel,
      category: opts.layoutCategory,
      attributes: {
        "class": 'fa fa-object-group'
      },
      content: {
        type: 'section'
      }
    });
  }
});

/***/ }),

/***/ "./plugins/drupal-basic-blocks/components.js":
/*!***************************************************!*\
  !*** ./plugins/drupal-basic-blocks/components.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _traits_tag_name_trait__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../traits/tag-name-trait */ "./traits/tag-name-trait.js");
/**
 * @file
 * Contains components.js
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var domComponents = editor.DomComponents;
  /* Component type : Comment */

  domComponents.addType('comment', {
    model: {
      toHTML: function toHTML() {
        return '';
      }
    }
  });
  /* Component type : Heading */

  domComponents.addType('heading', {
    extend: 'text',
    isComponent: function isComponent(el) {
      return el && el.tagName && ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(el.tagName) >= 0;
    },
    model: {
      defaults: {
        name: opts.headingLabel,
        tagName: opts.headingDefaultTagName,
        traits: ['id', (0,_traits_tag_name_trait__WEBPACK_IMPORTED_MODULE_0__["default"])(opts.headingLabelTagNameTrait, opts.headingOptionsTagNameTrait)]
      }
    }
  });
  /* Component type : Paragraph */

  domComponents.addType('paragraph', {
    extend: 'text',
    isComponent: function isComponent(el) {
      return el && el.tagName === 'P';
    },
    model: {
      defaults: {
        name: opts.paragraphLabel,
        tagName: 'p',
        traits: ['id']
      }
    }
  });
  /* Component type : List */

  domComponents.addType('list', {
    isComponent: function isComponent(el) {
      var tagNames = opts.listOptionsTagNameTrait.map(function (tagName) {
        return tagName.id.toUpperCase();
      });
      return el && el.tagName && tagNames.indexOf(el.tagName) >= 0;
    },
    model: {
      defaults: {
        name: opts.listLabel,
        tagName: opts.listDefaultTagName,
        droppable: 'li',
        traits: ['id', (0,_traits_tag_name_trait__WEBPACK_IMPORTED_MODULE_0__["default"])(opts.listLabelTagNameTrait, opts.listOptionsTagNameTrait)]
      }
    }
  });
  /* Component type : List item */

  domComponents.addType('list-item', {
    extend: 'text',
    isComponent: function isComponent(el) {
      return el && el.tagName && el.tagName === 'LI';
    },
    model: {
      defaults: {
        name: opts.listItemLabel,
        tagName: 'li',
        draggable: 'ul, ol',
        traits: ['id']
      }
    }
  });
  /* Component type : Section */

  domComponents.addType('section', {
    isComponent: function isComponent(el) {
      var tagNames = opts.sectionOptionsTagNameTrait.map(function (tagName) {
        return tagName.id.toUpperCase();
      });
      return el && el.tagName && tagNames.indexOf(el.tagName) >= 0;
    },
    model: {
      defaults: {
        name: opts.sectionLabel,
        tagName: opts.sectionDefaultTagName,
        traits: ['id', (0,_traits_tag_name_trait__WEBPACK_IMPORTED_MODULE_0__["default"])(opts.sectionLabelTagNameTrait, opts.sectionOptionsTagNameTrait)]
      }
    }
  });
});

/***/ }),

/***/ "./traits/tag-name-trait.js":
/*!**********************************!*\
  !*** ./traits/tag-name-trait.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @file
 * Contains tag-name-trait.js
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function () {
  var label = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Drupal.t('Tag');
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return {
    label: label,
    name: 'tagName',
    changeProp: 1,
    type: 'select',
    options: options
  };
});

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!************************************************************!*\
  !*** ./plugins/drupal-basic-blocks/drupal-basic-blocks.js ***!
  \************************************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components */ "./plugins/drupal-basic-blocks/components.js");
/* harmony import */ var _blocks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blocks */ "./plugins/drupal-basic-blocks/blocks.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * @file
 * Contains drupal-basic-blocks.js
 */


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (editor) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var config = _objectSpread({
    blocks: [],
    basicCategory: {
      id: 'basic',
      label: Drupal.t('Basic'),
      order: 0
    },
    layoutCategory: {
      id: 'layout',
      label: Drupal.t('Layout'),
      order: 5,
      open: false
    },
    headingLabel: Drupal.t('Heading'),
    headingDefaultTagName: 'h2',
    headingDefaultContent: Drupal.t('Insert your text here'),
    headingLabelTagNameTrait: Drupal.t('Heading level'),
    headingOptionsTagNameTrait: [{
      id: 'h1',
      name: Drupal.t('Heading 1')
    }, {
      id: 'h2',
      name: Drupal.t('Heading 2')
    }, {
      id: 'h3',
      name: Drupal.t('Heading 3')
    }, {
      id: 'h4',
      name: Drupal.t('Heading 4')
    }, {
      id: 'h5',
      name: Drupal.t('Heading 5')
    }, {
      id: 'h6',
      name: Drupal.t('Heading 6')
    }],
    paragraphLabel: Drupal.t('Paragraph'),
    paragraphDefaultContent: Drupal.t('Insert your text here'),
    linkLabel: Drupal.t('Link'),
    linkDefaultContent: Drupal.t('Link'),
    imageLabel: Drupal.t('Image'),
    videoLabel: Drupal.t('Video'),
    listLabel: Drupal.t('List'),
    listDefaultTagName: 'ul',
    listDefaultComponents: [{
      type: 'list-item',
      content: 'Option 1'
    }, {
      type: 'list-item',
      content: 'Option 2'
    }, {
      type: 'list-item',
      content: 'Option 3'
    }],
    listLabelTagNameTrait: Drupal.t('Type'),
    listOptionsTagNameTrait: [{
      id: 'ul',
      name: Drupal.t('Unordered')
    }, {
      id: 'ol',
      name: Drupal.t('Ordered')
    }],
    listItemLabel: Drupal.t('List item'),
    mapLabel: Drupal.t('Map'),
    sectionLabel: Drupal.t('Section'),
    sectionDefaultTagName: 'div',
    sectionLabelTagNameTrait: Drupal.t('Tag'),
    sectionOptionsTagNameTrait: [{
      id: 'div',
      name: 'Div'
    }, {
      id: 'section',
      name: 'Section'
    }, {
      id: 'header',
      name: 'Header'
    }, {
      id: 'nav',
      name: 'Nav'
    }, {
      id: 'main',
      name: 'Main'
    }, {
      id: 'aside',
      name: 'Aside'
    }, {
      id: 'footer',
      name: 'Footer'
    }, {
      id: 'article',
      name: 'Article'
    }, {
      id: 'address',
      name: 'Address'
    }, {
      id: 'figure',
      name: 'Figure'
    }]
  }, opts);
  /* Create new text component on Enter key press */


  editor.on('load', function () {
    editor.Canvas.getBody().addEventListener('keydown', function (e) {
      var component = editor.getSelected();

      if (component.get('type') === 'paragraph' && e.keyCode === 13 && !e.shiftKey) {
        e.preventDefault(); // Clone the current text with style

        var newComponent = component.clone();
        component.parent().append(newComponent); // Empty the content

        newComponent.empty(); // Select and focus new component

        editor.select(newComponent);
        newComponent.trigger('focus');
      }
    });
  });
  (0,_components__WEBPACK_IMPORTED_MODULE_0__["default"])(editor, config);
  (0,_blocks__WEBPACK_IMPORTED_MODULE_1__["default"])(editor, config);
});
})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,